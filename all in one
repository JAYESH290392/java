Write a Java program to append the specified element to the end of a linked list.

import java.util.LinkedList;
  public class p {
  public static void main(String[] args) {
   LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("White");
          l_list.add("Pink");
          l_list.add("Yellow");
   System.out.println("The linked list: " + l_list);
   }
}

Write a Java program to iterate through all elements in a linked list.

import java.util.LinkedList;
  public class q {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("White");
          l_list.add("Pink");
  for (String element : l_list) {
    System.out.println(element);
    }
 }
}

Write a Java program to iterate through all elements in a linked list starting at the specified position.

import java.util.Iterator;
  public class r {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("White");
          l_list.add("Pink");
   Iterator p = l_list.listIterator(1);

   while (p.hasNext()) {
   System.out.println(p.next());
   }
   }
}

Write a Java program to iterate a linked list in reverse order.

import java.util.LinkedList;
import java.util.Iterator;
  public class s {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("Pink");
          l_list.add("orange");
      
   System.out.println("Original linked list:" + l_list);  
 
    Iterator it = l_list.descendingIterator();

     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }
}

Write a Java program to insert the specified element at the specified position in the linked list.

import java.util.LinkedList;
public class t {
	public static void main(String[] args) {
		LinkedList <String> l_list = new LinkedList <String> ();
		l_list.add("Red");
		l_list.add("Green");
		l_list.add("Black");
		l_list.add("White");
		l_list.add("Pink");
		System.out.println("Original linked list: ");
		System.out.println("Let add the Yellow color after the Red Color: " + l_list);
		l_list.add(1, "Yellow");
		System.out.println("The linked list:" + l_list);
	}
}

Write a Java program to insert elements into the linked list at the first and last position.

import java.util.LinkedList;
  public class u {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
     System.out.println("Original linked list:" + l_list);    
    l_list.addFirst("White");
 
    l_list.addLast("Pink");
     System.out.println("Final linked list:" + l_list);  
 }
}

Write a Java program to insert the specified element at the front of a linked list.

import java.util.LinkedList;
  public class v {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
     System.out.println("Original linked list:" + l_list);    
     l_list.offerFirst("Pink");
     System.out.println("Final linked list:" + l_list);  
 }	
}

Write a Java program to insert the specified element at the end of a linked list.

import java.util.LinkedList;
  public class w {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
     System.out.println("Original linked list:" + l_list);    
     l_list.offerLast("Pink");
     System.out.println("Final linked list:" + l_list);  
 }
}

Write a Java program to insert some elements at the specified position into a linked list.

import java.util.LinkedList;
public class a {
 public static void main(String[] args) {
  LinkedList <String> l_list = new LinkedList <String> ();
  l_list.add("Red");
  l_list.add("Green");
  l_list.add("Black");

  System.out.println("Original linked list:" + l_list);


  LinkedList <String> new_l_list = new LinkedList <String> ();
  new_l_list.add("White");
  new_l_list.add("Pink");

  l_list.addAll(1, new_l_list);

  System.out.println("LinkedList:" + l_list);
 }
}

Write a Java program to get the first and last occurrence of the specified elements in a linked list.

import java.util.LinkedList;
import java.util.Iterator;
  public class b {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("Pink");
          l_list.add("orange");
      
   System.out.println("Original linked list:" + l_list);  
 
    Object first_element = l_list.getFirst();
    System.out.println("First Element is: "+first_element);
 
    Object last_element = l_list.getLast();
    System.out.println("Last Element is: "+last_element);
 }
}

Write a Java program to display the elements and their positions in a linked list.

import java.util.LinkedList;
import java.util.Iterator;
  public class d {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("Pink");
          l_list.add("orange");
      
   System.out.println("Original linked list:" + l_list);  
  for(int p=0; p < l_list.size(); p++)
   {
      System.out.println("Element at index "+p+": "+l_list.get(p));
    } 
 }
}

Write a Java program to remove a specified element from a linked list.

import java.util.*;

public class e {
 public static void main(String[] args) {
  LinkedList <String> l_list = new LinkedList <String> ();
  l_list.add("Red");
  l_list.add("Green");
  l_list.add("Black");
  l_list.add("Pink");
  l_list.add("orange");

  System.out.println("The Original linked list: " + l_list);

  l_list.remove(2);
  System.out.println("The New linked list: " + l_list);
 }
}

Write a Java program to remove first and last element from a linked list.

import java.util.*;

  public class f {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("Pink");
          l_list.add("orange");
      
   System.out.println("The Original linked list: " + l_list);

    Object firstElement = l_list.removeFirst();
    System.out.println("Element removed: "+ firstElement);
 
    Object lastElement = l_list.removeLast();
    System.out.println("Element removed: "+ lastElement);
    System.out.println("The New linked list: " + l_list);
  }
}

Write a Java program to remove all the elements from a linked list.

import java.util.*;
  public class g {
  public static void main(String[] args) {
     LinkedList<String> l_list = new LinkedList<String>();
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("Pink");
          l_list.add("orange");
      
   System.out.println("The Original linked list: " + l_list);

    l_list.clear();
 
    System.out.println("The New linked list: " + l_list);
  }
}

Write a Java program of swap two elements in an linked list.

import java.util.*;

public class h {
 public static void main(String[] args) {
  LinkedList <String> l_list = new LinkedList <String> ();
  l_list.add("Red");
  l_list.add("Green");
  l_list.add("Black");
  l_list.add("Pink");
  l_list.add("orange");
  System.out.println("The Original linked list: " + l_list);
  
    Collections.swap(l_list, 0, 2);
    System.out.println("The New linked list after swap: " + l_list);
 }
}

Write a Java program to shuffle the elements in a linked list.

import java.util.*;

public class j {
 public static void main(String[] args) {
  LinkedList <String> l_list = new LinkedList <String> ();
  l_list.add("Red");
  l_list.add("Green");
  l_list.add("Black");
  l_list.add("Pink");
  l_list.add("orange");
  System.out.println("Linked list before shuffling:\n" + l_list);  
  Collections.shuffle(l_list);
  System.out.println("Linked list after shuffling:\n" + l_list); 
  }
}

Write a Java program to join two linked lists.

import java.util.*;
public class l {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
  
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("List of first linked list: " + c1);
         LinkedList <String> c2 = new LinkedList <String> ();
          c2.add("Red");
          c2.add("Green");
          c2.add("Black");
          c2.add("Pink");
          System.out.println("List of second linked list: " + c2);
        
        LinkedList <String> a = new LinkedList <String> ();
        a.addAll(c1);
        a.addAll(c2);
        System.out.println("New linked list: " + a);
             }
}

Write a Java program to clone an linked list to another linked list.

import java.util.*;
public class k {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked  list: " + c1);
           LinkedList <String> newc1 = new LinkedList <String> ();
                newc1 = (LinkedList)c1.clone();
          System.out.println("Cloned linked list: " + newc1);       
}
}

Write a Java program to remove and return the first element of a linked list.

import java.util.*;
public class l {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked  list: " + c1);
           
     System.out.println("Removed element: "+c1.pop());
     
     System.out.println("Linked list after pop operation: "+c1);
  }
} 

Write a Java program to retrieve but does not remove, the first element of a linked list.

import java.util.*;

public class m {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
            c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1); 
    String x = c1.peekFirst();
    System.out.println("First element in the list: " + x);
    System.out.println("Original linked list: " + c1);   
 }
} 

Write a Java program to retrieve but does not remove, the last element of a linked list.

import java.util.*;

public class n {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1);    
        String x = c1.peekLast();
    System.out.println("Last element in the list: " + x);
    System.out.println("Original linked list: " + c1);
    
 }
}

Write a Java program to check if a particular element exists in a linked list.

import java.util.*;
public class p {
 public static void main(String[] args) {
  LinkedList <String> c1 = new LinkedList <String> ();
            c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1);
           
    if (c1.contains("Green")) {
       System.out.println("Color Green is present in the linked list.");
    } else {
       System.out.println("Color Green is not present in the linked list.");
     }
    
    if (c1.contains("Orange")) {
       System.out.println("Color Orange is present in the linked list.");
    } else {
       System.out.println("Color Orange is not present in the linked list.");
     }
    
 }
}

Write a Java program to convert a linked list to array list.

import java.util.*;

public class a {
 public static void main(String[] args) {
  LinkedList <String> linked_list = new LinkedList <String> ();
            linked_list.add("Red");
          linked_list.add("Green");
          linked_list.add("Black");
          linked_list.add("White");
          linked_list.add("Pink");
          System.out.println("Original linked list: " + linked_list);
   
     List<String> list = new ArrayList<String>(linked_list);

    for (String str : list){
      System.out.println(str);
    }
 }
}


Write a Java program to compare two linked lists.

import java.util.*;
  public class b {
  public static void main(String[] args) {
   LinkedList<String> c1= new LinkedList<String>();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");

          LinkedList<String> c2= new LinkedList<String>();
          c2.add("Red");
          c2.add("Green");
          c2.add("Black");
          c2.add("Orange");

          LinkedList<String> c3 = new LinkedList<String>();
          for (String e : c1)
             c3.add(c2.contains(e) ? "Yes" : "No");
          System.out.println(c3);         
     }
}

Write a Java program to test an linked list is empty or not.

import java.util.LinkedList;
import java.util.Collections;
  public class c {
  public static void main(String[] args) {
          LinkedList<String> c1= new LinkedList<String>();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1);
          System.out.println("Check the above linked list is empty or not! "+c1.isEmpty());
          c1.removeAll(c1);
          System.out.println("Linked list after remove all elements "+c1);   
          System.out.println("Check the above linked list is empty or not! "+c1.isEmpty());
   }
}

Write a Java program to replace an element in a linked list.

import java.util.LinkedList;
import java.util.Collections;
  public class d {
  public static void main(String[] args) {
          LinkedList<String> c1= new LinkedList<String>();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1);
          c1.set(1, "Orange");
          System.out.println("The value of second element changed.");
          System.out.println("New linked list: " + c1);
   }
}




# HashSet Exercises #


Write a Java program to append the specified element to the end of a hash set.

import java.util.HashSet;
  public class a {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

   System.out.println("The Hash Set: " + h_set);
   }
}

Write a Java program to iterate through all elements in a hash list.

import java.util.*;
import java.util.Iterator;
  public class b {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

    Iterator<String> p = h_set.iterator();
   while (p.hasNext()) {
   System.out.println(p.next());
   }
   }
}

Write a Java program to get the number of elements in a hash set.

import java.util.*;
import java.util.Iterator;
  public class e {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    System.out.println("Size of the Hash Set: " + h_set.size());
   }
}

Write a Java program to empty an hash set.

import java.util.*;

  public class f {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    h_set.removeAll(h_set);
    System.out.println("Hash Set after removing all the elements "+h_set);   
   }
}


Write a Java program to test a hash set is empty or not.

import java.util.*;

  public class g {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    System.out.println("Checking the above array list is empty or not! "+h_set.isEmpty());
    System.out.println("Remove all the elements from a Hash Set: ");
    h_set.removeAll(h_set);
    System.out.println("Hash Set after removing all the elements "+h_set);   
   }
}

Write a Java program to clone a hash set to another hash set.

import java.util.*;

  public class h {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    HashSet <String> new_h_set = new HashSet <String> ();
          new_h_set = (HashSet)h_set.clone();
          System.out.println("Cloned Hash Set: " + new_h_set);         
   }
}

Write a Java program to convert a hash set to an array.

import java.util.*;
  public class i {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
      System.out.println("Original Hash Set: " + h_set);
      String[] new_array = new String[h_set.size()];
      h_set.toArray(new_array);
 
     System.out.println("Array elements: ");
      for(String element : new_array){
        System.out.println(element);
     }
   }
}

Write a Java program to convert a hash set to a tree set.

import java.util.*;
  public class k {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
      System.out.println("Original Hash Set: " + h_set);
    
     Set<String> tree_set = new TreeSet<String>(h_set);
 
     System.out.println("TreeSet elements: ");
     for(String element : tree_set){
        System.out.println(element);
     }
  }
}

Write a Java program to convert a hash set to a List/ArrayList.

import java.util.*;

  public class l {
  public static void main(String[] args) {
     HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
      System.out.println("Original Hash Set: " + h_set);
    
     List<String> list = new ArrayList<String>(h_set);
 
     System.out.println("ArrayList contains: "+ list);
  }
}

Write a Java program to compare two hash sets.

import java.util.*;
  public class m {
  public static void main(String[] args) {
        HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");

          HashSet<String>h_set2 = new HashSet<String>();
          h_set2.add("Red");
          h_set2.add("Pink");
          h_set2.add("Black");
          h_set2.add("Orange");
          HashSet<String>result_set = new HashSet<String>();
         for (String element : h_set){
             System.out.println(h_set2.contains(element) ? "Yes" : "No");
          }      
     }
}


Write a Java program to compare two sets and retain elements which are same on both sets.

import java.util.*;
  public class n {
  public static void main(String[] args) {
        HashSet<String> h_set1 = new HashSet<String>();
          h_set1.add("Red");
          h_set1.add("Green");
          h_set1.add("Black");
          h_set1.add("White");
          System.out.println("Frist HashSet content: "+h_set1);
          HashSet<String>h_set2 = new HashSet<String>();
          h_set2.add("Red");
          h_set2.add("Pink");
          h_set2.add("Black");
          h_set2.add("Orange");
          System.out.println("Second HashSet content: "+h_set2);
          h_set1.retainAll(h_set2);
          System.out.println("HashSet content:");
          System.out.println(h_set1);
     }
}


Write a Java program to remove all of the elements from a hash set.

Sample Solution:

Java Code:

import java.util.*;
  public class p {
  public static void main(String[] args) {
        HashSet<String> h_set = new HashSet<String>();
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
           System.out.println("Original hash set contains: "+ h_set);
          h_set.clear();
 
          System.out.println("HashSet content: "+h_set);
     }
}



TreeSet Exercises

Write a Java program to create a new tree set, add some colors (string) and print out the tree set.

import java.util.TreeSet;
public class colors {
  public static void main(String[] args) {
  TreeSet<String> tree_set = new TreeSet<String>();
  tree_set.add("Red");
  tree_set.add("Green");
  tree_set.add("Orange");
  tree_set.add("White");
  tree_set.add("Black");
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}


Write a Java program to iterate through all elements in a tree set.

import java.util.TreeSet;
public class iterate {
  public static void main(String[] args) {
  TreeSet<String> tree_set = new TreeSet<String>();
  tree_set.add("Red");
  tree_set.add("Green");
  tree_set.add("Orange");
  tree_set.add("White");
  tree_set.add("Black");
  for (String element : tree_set) {
    System.out.println(element);
    }
 }
}

Write a Java program to add all the elements of a specified tree set to another tree set.

import java.util.TreeSet;
public class specified {
  public static void main(String[] args) {
  TreeSet<String> tree_set1 = new TreeSet<String>();
  tree_set1.add("Red");
  tree_set1.add("Green");
  tree_set1.add("Orange");
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<String> tree_set2 = new TreeSet<String>();
  tree_set2.add("Pink");
  tree_set2.add("White");
  tree_set2.add("Black");
  System.out.println("Tree set2: "+tree_set2);
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}

Write a Java program to create a reverse order view of the elements contained in a given tree set.

import java.util.TreeSet;
import java.util.Iterator;
  public class reverse {
  public static void main(String[] args) {
      TreeSet<String> t_set = new TreeSet<String>();
          t_set.add("Red");
          t_set.add("Green");
          t_set.add("Black");
          t_set.add("Pink");
          t_set.add("orange");
   System.out.println("Original tree set:" + t_set);  
     Iterator it = t_set.descendingIterator();
     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }
}

Write a Java program to get the first and last elements in a tree set.

import java.util.TreeSet;
  public class flelement {
  public static void main(String[] args) {
  TreeSet<String> tree_set = new TreeSet<String>();
  tree_set.add("Red");
  tree_set.add("Green");
  tree_set.add("Orange");
  tree_set.add("White");
  tree_set.add("Black");
  System.out.println("Tree set: ");
  System.out.println(tree_set);

   Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
   Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}

Write a Java program to clone a tree set list to another tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class Clone {
  public static void main(String[] args) {
     TreeSet<String> t_set = new TreeSet<String>();
          t_set.add("Red");
          t_set.add("Green");
          t_set.add("Black");
          t_set.add("Pink");
          t_set.add("orange");
     
   System.out.println("Original tree set:" + t_set);  
    TreeSet<String> new_t_set = (TreeSet<String>)t_set.clone();
          System.out.println("Cloned tree list: " + t_set);      
     }
 }
 
 Write a Java program to get the number of elements in a tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class number {
  public static void main(String[] args) {
     TreeSet<String> t_set = new TreeSet<String>();
          t_set.add("Red");
          t_set.add("Green");
          t_set.add("Black");
          t_set.add("Pink");
          t_set.add("orange");
     System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());
   }
}

Write a Java program to compare two tree sets.

import java.util.TreeSet;
import java.util.Iterator;

  public class compare {
  public static void main(String[] args) {
        TreeSet<String> t_set1 = new TreeSet<String>();
          t_set1.add("Red");
          t_set1.add("Green");
          t_set1.add("Black");
          t_set1.add("White");
          System.out.println("Free Tree set: "+t_set1);

          TreeSet<String> t_set2 = new TreeSet<String>();
          t_set2.add("Red");
          t_set2.add("Pink");
          t_set2.add("Black");
          t_set2.add("Orange");
          System.out.println("Second Tree set: "+t_set2);
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}

Write a Java program to find the numbers less than 7 in a tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class number {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   tree_num.add(1);
   tree_num.add(2);
   tree_num.add(3);
   tree_num.add(5);
   tree_num.add(6);
   tree_num.add(7);
   tree_num.add(8);
   tree_num.add(9);
   tree_num.add(10);
   treeheadset = (TreeSet)tree_num.headSet(7);  

   Iterator iterator;
   iterator = treeheadset.iterator();
     
   System.out.println("Tree set data: ");     
   while (iterator.hasNext()){
   System.out.println(iterator.next() + " ");
   }
   }    
}

Write a Java program to get the element in a tree set which is greater than or equal to the given element.

import java.util.TreeSet;
import java.util.Iterator;

  public class greater {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   
   System.out.println("Greater than or equal to 86 : "+tree_num.ceiling(86));
   System.out.println("Greater than or equal to 29 : "+tree_num.ceiling(29));
   }    
}

Write a Java program to get the element in a tree set which is less than or equal to the given element.

import java.util.TreeSet;
import java.util.Iterator;
  public class elemently {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   
   System.out.println("Less than or equal to 86 : "+tree_num.floor(86));
   System.out.println("Less than or equal to 29 : "+tree_num.floor(29));
   }    
}

Write a Java program to get an element in a tree set which is strictly greater than the given element.

import java.util.TreeSet;
import java.util.Iterator;

  public class greater {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   
   System.out.println("Strictly greater than 76 : "+tree_num.higher(76));
   System.out.println("Strictly greater than 31 : "+tree_num.higher(31));
   }    
}

Write a Java program to get an element in a tree set which is strictly less than the given element.

import java.util.TreeSet;
import java.util.Iterator;

  public class element {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}

Write a Java program to retrieve and remove the first element of a tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class first {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}

Write a Java program to retrieve and remove the last element of a tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class last {
  public static void main(String[] args) {
  TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}

Write a Java program to remove a given element from a tree set.

import java.util.TreeSet;
import java.util.Iterator;

  public class remove {
  public static void main(String[] args) {
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes 70 from the list: "+tree_num.remove(70));
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}

